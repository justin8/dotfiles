#!/bin/bash
set -e

cd "$HOME"

# This works correctly when called via 'yadm bootstrap' but not when used directly
DOTFILES=$(
  cd "$(dirname "$0")"
  pwd
)

# OS Detection / OS Specific variables
if [[ -f /etc/os-release ]]; then
  RELEASE=$(grep '^NAME=' /etc/os-release | sed -E 's/NAME="?([a-zA-Z]+).*/\1/')
  if [[ $RELEASE == Amazon ]]; then
    VERSION=$(grep '^VERSION="' /etc/os-release | sed -E 's/VERSION="([0-9.]+)"/\1/')
    if [[ $VERSION == 2 ]]; then
      RELEASE=AL2
    else
      RELEASE=AL1
    fi
  fi
elif [[ -f /usr/lib/os-release ]]; then
  RELEASE=$(grep '^NAME="' /usr/lib/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif uname -a | grep -qi darwin >/dev/null 2>&1; then
  RELEASE="Mac"
else
  RELEASE="false"
  echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]; then
  echo "An error has occured while determining the current path. Exiting."
  exit 1
fi

git_update() {
  repo="$1"
  dest="$2"
  branch="$3"
  if [[ -d "$dest" ]]; then
    cd "$dest"
    git reset --hard "$branch"
    git pull
  else
    git clone "$repo" "$dest"
  fi
}

file_download() {
  source="$1"
  dest="$2"

  if ! [[ -e "$dest" ]]; then
    curl -Lo "$dest" "$source"
  fi
}

install_packages_meta() {
  echo
  echo "Verifying required packages are installed."
  case $RELEASE in
  'Debian' | 'Ubuntu' | 'Raspbian') install_command=install_packages_debian ;;
  'AL2') install_command=install_packages_al2 ;;
  'Mac') install_command=install_packages_mac ;;
  'Gentoo') install_command=install_packages_gentoo ;;
  'Arch') install_command=install_packages_arch ;;
  'Fedora') install_command=install_packages_fedora ;;
  *)
    cat <<-EOF
			You are not using a supported distro; package installation will be skipped. Make sure the required packages have been installed.

			Press enter to continue anyway, or ctrl+c to cancel
		EOF
    read -r
    return
    ;;
  esac

  $install_command
}

create_package_list() {
  PACINST=$(cat "$DOTFILES/packages.$1")
}

install_packages_al2() {
  echo "OS appears to be Amazon Linux 2..."

  echo "Installing required packages..."
  create_package_list al2
  # shellcheck disable=SC2086
  sudo yum install -y $PACINST
  install_package_groups_al2
}

install_package_groups_al2() {
  echo "Installing required package groups..."
  create_package_list al2-groups
  IFS=$'\n' command eval 'for group in $PACINST; do sudo yum groupinstall -y $group; done'
}

install_packages_gentoo() {
  echo "OS appears to be Gentoo..."

  echo "Installing required packages..."
  create_package_list gentoo

  # This is faster than using --noreplace which needs to compute dependencies
  FILTERED_PACINST=""
  for package in $PACINST; do
    # shellcheck disable=SC2086
    if ! qlist -Iv $package >/dev/null; then
      FILTERED_PACINST+="$package"
    fi
  done
  if [[ $FILTERED_PACINST ]]; then
    # shellcheck disable=SC2086
    sudo emerge $FILTERED_PACINST
  fi
}

install_packages_debian() {
  echo "OS appears to be Debian/Ubuntu..."

  echo "Installing required packages..."
  create_package_list debian
  sudo apt-get update
  # shellcheck disable=SC2086
  sudo apt-get install -y $PACINST
}

install_packages_fedora() {
  echo "OS appears to be Fedora..."
  create_package_list fedora

  echo "Installing required packages..."
  # shellcheck disable=SC2086
  sudo rpm-ostree install -y --idempotent $PACINST
}

install_packages_arch() {
  echo "OS appears to be Arch..."

  if ! which yay &>/dev/null; then
    echo "Installing Yay..."
    (
      cd /tmp
      rm -rf /ymp/yay
      git clone https://aur.archlinux.org/yay.git
      cd yay
      makepkg -si --noconfirm
      yay --save --makepkg "$HOME"/.local/bin/customize-makepkg
    )
  fi

  echo "Installing required packages..."
  create_package_list arch
  # shellcheck disable=SC2086
  yay -S --noconfirm --needed $PACINST

  sudo systemctl enable --now cronie
}

install_packages_mac() {
  if ! which brew &>/dev/null; then
    echo "Installing brew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    sudo xcodebuild -license accept
    brew doctor
  fi

  echo "Installing brew packages..."
  brew bundle --global
}

install_nix() {
  if ! which nix &>/dev/null; then
    echo "No nix installation found, installing nix..."
    exit 1
    case $RELEASE in
    'AL2')
      sudo mkdir /nix
      sudo chown $USER /nix
      curl -o /tmp/nix-install --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install
      if [[ -e /etc/pki/tls/certs/ca-bundle.crt ]] && grep -q NIX_SSL_CERT_FILE= /etc/environment; then
        echo 'export NIX_SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt' | sudo tee -a /etc/environment
      fi
      sh /tmp/nix-install --no-daemon --yes
      ;;
    'Mac') sh <(curl --proto '=https' --tlsv1.2 -L https://nixos.org/nix/install) --yes ;;
    'Arch')
      pacman -Sy nix
      sudo systemctl enable --now nix-daemon.service
      ;;
    *)
      echo "Setup of Nix is untested on this OS; install it manually and try to run this again"
      exit 1
      ;;
    esac
  fi
  echo "Nix is installed"
}

install_packages_nix() {
  export PATH=$PATH:$HOME/.nix-profile/bin:/nix/var/nix/profiles/default/bin
  nix-channel --add https://nixos.org/channels/nixpkgs-unstable
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  nix-channel --update

  generate_home_manager_config

  echo "Installing nix packages..."
  nix run home-manager switch
}

generate_home_manager_config() {
  awk -v user=$USER -v home=$HOME '{
    gsub("{{user}}", user)
    gsub("{{home}}", home)
    print
  }' "$HOME/.config/home-manager/flake.nix.template" >"$HOME/.config/home-manager/flake.nix"
}

configure_iterm() {
  if [[ -e "/Applications/iTerm.app" ]]; then
    defaults write com.googlecode.iterm2 AlternateMouseScroll -bool true
    defaults write com.googlecode.iterm2 FocusFollowsMouse -bool true
  fi
}

update_yadm() {
  git_update "https://github.com/TheLocehiliosan/yadm.git" "$HOME/.yadm-project" "origin/master"
}

update_submodules() {
  yadm submodule update --recursive --init
}

update_scripts() {
  echo
  echo "Updating scripts..."
  git_update "https://github.com/justin8/scripts.git" "$HOME/.scripts" "origin/master"
}

configure_tmux() {
  echo
  echo "Configuring tmux..."
  mkdir -p "$HOME/.tmux/plugins"
  git_update "https://github.com/tmux-plugins/tpm" "$HOME/.tmux/plugins/tpm" "origin/master"
  $HOME/.tmux/plugins/tpm/bin/install_plugins
}

install_fonts() {
  echo
  echo "Installing Nerd Fonts..."
  FONT_DIR="$HOME/.local/share/fonts/"
  [[ $RELEASE == Mac ]] && FONT_DIR="$HOME/Library/Fonts/"
  MESLO_FONT_FILE="$FONT_DIR/Meslo LG S Regular Nerd Font Complete.ttf"
  JETBRAINS_FONT_FILE="$FONT_DIR/JetBrainsMonoNerdFont-Regular.ttf"

  if ! [[ -f "$MESLO_FONT_FILE" ]]; then
    echo "Downloading Meslo Nerd Fonts..."
    file_download "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/Meslo.zip" "$DOTFILES/Meslo.zip"
    unzip -nd "$FONT_DIR" "$DOTFILES/Meslo.zip"
  fi

  if ! [[ -f "$JETBRAINS_FONT_FILE" ]]; then
    echo "Downloading JetBrainsMono Nerd Fonts..."
    file_download "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.zip" "$DOTFILES/JetBrainsMono.zip"
    unzip -nd "$FONT_DIR" "$DOTFILES/JetBrainsMono.zip"
  fi
}

configure_gitconfig() {
  echo
  echo "Configuring gitconfig..."
  git config --global push.default current
  git config --global color.ui auto
  git config --global merge.conflictstyle diff3
  git config --global core.editor nvim
  git config --global pull.rebase true
  git config --global pull.autostash true
  git config --global rebase.autostash true
  git config --global init.defaultBranch main

  # CodeCommit support
  git config --global credential.helper '!aws codecommit credential-helper $@'
  git config --global credential.UseHttpPath true

  # Brazil CLI recommendations
  git config --global core.pager "less -FMRiX"
  git config --global alias.dag "log --graph --format='format:%C(yellow)%h%C(reset) %C(blue)"%an" <%ae>%C(reset) %C(magenta)%cr%C(reset)%C(auto)%d%C(reset)%n%s' --date-order"
}

change_shell() {
  local setshell=0
  local newshell=zsh
  echo
  echo "Setting shell to $newshell..."
  if [[ $RELEASE == 'Mac' ]]; then
    if ! finger "$USER" | grep -q "Shell.*$newshell"; then
      setshell=1
    fi
  else
    if ! getent passwd "$USER" | grep -q $newshell; then
      setshell=1
    fi
  fi

  if [[ $setshell == 1 ]]; then
    if which $newshell >/dev/null; then
      sudo chsh -s "$(which $newshell)" "$USER"
    fi
  fi
}

reload_bat_cache() {
  BAT=bat
  if $(which batcat &>/dev/null); then
    BAT=batcat
  fi
  $BAT cache --clear
  $BAT cache --build
}

update_yadm
install_packages_meta
install_nix
install_packages_nix
configure_gitconfig
update_submodules
update_scripts
configure_tmux
install_fonts
reload_bat_cache
change_shell
