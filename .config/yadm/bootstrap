#!/bin/bash
set -e

cd "$HOME"

# This works correctly when called via 'yadm bootstrap' but not when used directly
DOTFILES=$(
    cd "$(dirname "$0")"
    pwd
)

# OS Detection / OS Specific variables
if [[ -f /etc/os-release ]]; then
    RELEASE=$(grep '^NAME=' /etc/os-release | sed -E 's/NAME="?([a-zA-Z]+).*/\1/')
    if [[ $RELEASE == Amazon ]]; then
        VERSION=$(grep '^VERSION="' /etc/os-release | sed -E 's/VERSION="([0-9.]+)"/\1/')
        if [[ $VERSION == 2 ]]; then
            RELEASE=AL2
        else
            RELEASE=AL1
        fi
    fi
elif [[ -f /usr/lib/os-release ]]; then
    RELEASE=$(grep '^NAME="' /usr/lib/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif uname -a | grep -qi darwin >/dev/null 2>&1; then
    RELEASE="Mac"
else
    RELEASE="false"
    echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]; then
    echo "An error has occured while determining the current path. Exiting."
    exit 1
fi

ok() {
    if [[ $RELEASE == "Mac" ]]; then
        if which gecho &>/dev/null; then
            gecho -e "[ \e[1;32mOK\e[00m ]"
        else
            echo "[ OK ]"
        fi
    else
        echo -e "[ \e[1;32mOK\e[00m ]"
    fi
}

git_update() {
    repo="$1"
    dest="$2"
    if [[ -d "$dest" ]]; then
        cd "$dest"
        git reset --hard origin/master >/dev/null 2>&1
        git pull >/dev/null 2>&1
    else
        git clone "$repo" "$dest" >/dev/null 2>&1
    fi
}

file_download() {
    source="$1"
    dest="$2"

    if ! [[ -e "$dest" ]]; then
        curl -Lo "$dest" "$source"
    fi
}

install_pyenv() {
    echo -n "Installing pyenv... "
    git_update "https://github.com/pyenv/pyenv.git" "$HOME/.pyenv"
    git_update "https://github.com/yyuu/pyenv-virtualenvwrapper.git" "$HOME/.pyenv/plugins/pyenv-virtualenvwrapper"
    git_update "https://github.com/pyenv/pyenv-doctor.git" "$HOME/.pyenv/plugins/pyenv-doctor"

    # init pyenv
    export PATH=$PATH:$HOME/.pyenv/bin:$HOME/.local/bin
    eval "$(pyenv init -)"

    # There's no 'latest' command
    PYTHON_VERSION=3.9.1
    if ! [[ -e "$HOME/.pyenv/versions/$PYTHON_VERSION" ]]; then
        pyenv install 3.9.1
        pyenv global 3.9.1
    fi

    ok
}

install_packages_meta() {
    echo "Verifying required packages are installed."
    case $RELEASE in
    'Debian' | 'Ubuntu' | 'Raspbian') install_command=install_packages_debian ;;
    'AL2') install_command=install_packages_al2 ;;
    'Mac') install_command=install_packages_mac ;;
    'Gentoo') install_command=install_packages_gentoo ;;
    *)
        cat <<-EOF
			You are not using a supported distro; package installation will be skipped. Make sure the required packages have been installed.
			
			Press enter to continue anyway, or ctrl+c to cancel
		EOF
        read -r
        return
        ;;
    esac

    $install_command
}

create_package_list() {
    PACINST=$(cat "$DOTFILES/packages.$1")
}

install_aws_cli() {
    echo "Installing AWS CLI..."

    if ! which aws &>/dev/null; then
        case $RELEASE in
            'Mac')
                (cd /tmp
                curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
                sudo installer -pkg AWSCLIV2.pkg -target /)
                ;;
            *)
                (cd /tmp
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install)
                ;;
        esac
    fi
    ok
}

install_packages_al2() {
    echo "OS appears to be Amazon Linux 2..."

    echo -n "Installing required packages..."
    create_package_list al2
    sudo yum install -y $PACINST
    install_package_groups_al2
}

install_package_groups_al2() {
    echo -n "Installing required package groups..."
    create_package_list al2-groups
    IFS=$'\n' command eval 'for group in $PACINST; do sudo yum groupinstall -y $group; done'
}

install_packages_gentoo() {
    echo "OS appears to be Gentoo..."

    echo -n "Installing required packages..."
    create_package_list gentoo

    # This is faster than using --noreplace which needs to compute dependencies
    FILTERED_PACINST=""
    for package in $PACINST; do
        if ! qlist -Iv $package > /dev/null; then
            FILTERED_PACINST+="$package"
        fi
    done
    if [[ $FILTERED_PACINST ]]; then
        sudo emerge $FILTERED_PACINST
    fi
}

install_starship() {
    echo "Installing Starship..."
    if ! which starship &>/dev/null; then
        curl -fsSL https://starship.rs/install.sh | bash -s -- --force
    fi
}

install_packages_debian() {
    echo "OS appears to be Debian/Ubuntu..."

    echo -n "Installing required packages..."
    create_package_list debian
    sudo apt-get install -y $PACINST &>/dev/null
    ok
}

install_packages_mac() {
    if ! which brew &>/dev/null; then
        echo "Installing brew..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        sudo xcodebuild -license accept
        brew doctor
    fi

    echo "Installing brew packages..."
    brew bundle --global
}

configure_iterm() {
    if [[ -e "/Applications/iTerm.app" ]]; then
        defaults write com.googlecode.iterm2 AlternateMouseScroll -bool true
        defaults write com.googlecode.iterm2 FocusFollowsMouse -bool true
    fi
}

update_yadm() {
    git_update "https://github.com/TheLocehiliosan/yadm.git" "$HOME/.yadm-project"
}

update_submodules() {
    yadm submodule update --recursive --init

    # Auto-checkout latest version of scripts instead of pinning
    yadm submodule update --init --remote --rebase $HOME/.config/yadm/scripts
}

install_fzf() {
    "$DOTFILES/fzf/install" --all
}

install_nvm() {
    echo -n "Installing nvm... "
    if [[ ! -e $HOME/.nvm ]]; then
        unset NVM_DIR
        curl -sSo- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash &>/dev/null
        export NVM_DIR="$HOME/.nvm"
        . $NVM_DIR/nvm.sh
        nvm install 14 # Using --lts breaks the version mapping for my nvm speedups :(
        npm install --global yarn
        yarn global add npm-check-updates
    fi
    ok
}

install_python_dev_dependencies() {
    install_pyenv
    if ! which ipython &>/dev/null; then
        echo "Installing iPython... "
        pip install --user ipython
    fi
    if ! which poetry &>/dev/null; then
        echo "Installing poetry... "
        pip install --user poetry
        # Configure poetry while we're at it
        poetry config virtualenvs.in-project true

    fi

}

install_fonts() {
    echo -n "Installing Meslo Nerd Fonts..."
    FONT_DIR="$HOME/.local/share/fonts/"
    [[ $RELEASE == Mac ]] && FONT_DIR="$HOME/Library/Fonts/"

    file_download "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip" "$DOTFILES/Meslo.zip"
    unzip -nd "$FONT_DIR" "$DOTFILES/Meslo.zip"
    ok
}

configure_gitconfig() {
    echo -n "Configuring gitconfig... "
    git config --global push.default current
    git config --global color.ui auto
    git config --global merge.conflictstyle diff3
    git config --global core.editor vim
    git config --global pull.rebase true
    git config --global pull.autostash true
    git config --global rebase.autostash true

    # CodeCommit support
    git config --global credential.helper '!aws codecommit credential-helper $@'
    git config --global credential.UseHttpPath true
    ok
}

configure_vim() {
    mkdir -p ~/.local/tmp
    install_vimplug
    install_vim_plugins
}

install_vimplug() {
    echo -n "Installing/updating vimplug... "
    if [[ -f ~/.vim/autoload/plug.vim ]]; then
        # Vim always seems to have a return of 1...
        vim -esu ~/.vimrc +PlugUpgrade +qa || true
    else
        mkdir -p ~/.vim/autoload
        curl -sSfLo ~/.vim/autoload/plug.vim \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi
    ok
}

install_vim_plugins() {
    echo -n "Installing vim plugins... "
    # Vim always seems to have a return of 1...
    vim -esu ~/.vimrc +PlugClean! +PlugUpdate +qa || true
    ok
}

configure_rc_addon() {
    touch ~/.{zsh,shared}rc-addon
}

configure_oh_my_zsh() {
    install_starship
}

change_shell() {
    local setshell=0
    local newshell=zsh
    echo -n "Changing shell to $newshell "
    if [[ $RELEASE == 'Mac' ]]; then
        if ! finger "$USER" | grep -q "Shell.*$newshell"; then
            setshell=1
        fi
    else
        if ! getent passwd "$USER" | grep -q $newshell; then
            setshell=1
        fi
    fi

    if [[ $setshell == 1 ]]; then
        if which $newshell >/dev/null; then
            $sudo chsh -s "$(which $newshell)" "$USER"
        fi
    fi
    ok
}

update_yadm
install_packages_meta
update_submodules
install_fonts
configure_gitconfig
install_nvm
install_fzf
install_python_dev_dependencies
configure_vim
configure_rc_addon
configure_oh_my_zsh
change_shell
