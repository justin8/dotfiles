#!/bin/bash
[[ -e $HOME/.sharedrc-addon ]] && source $HOME/.sharedrc-addon

# Add ~/.bin to path
export PATH=$HOME/.yadm-project:$HOME/.local/bin:$HOME/.local/gnubin:$PATH

# Add yarn binaries to path
export PATH=$HOME/.yarn/bin:$PATH

# Add toolbox to path
export PATH=$HOME/.toolbox/bin:$PATH

# Force Gnome keyring usage if it is enabled
keyring_path="/run/user/${EUID}/keyring/ssh"
if [[ -e $keyring_path ]]; then
	export SSH_AUTH_SOCK="$keyring_path"
fi

# Use custom certs file for python requests if it exists
if [[ -e $HOME/.local/ssl/cert.pem ]]; then
	export REQUESTS_CA_BUNDLE=$HOME/.local/ssl/cert.pem
fi

# Aliases
alias vi=vim
alias less='less -R'
alias rsync='rsync --info=progress2'
alias grep='grep --color=auto'
alias kmonday='kinit -f -l 7d -r 30d'

alias bb='brazil-build'
alias check_endpoints="python $HOME/src/VAPTPublic/tools/tls_checking/check_endpoints.py"

alias mwinit="mwinit --aea -s"
alias mwcurl='curl --location-trusted --negotiate -u : -b ~/.midway/cookie -c ~/.midway/cookie'
alias update_internal_certs='mkdir -p $HOME/.local/ssl; security find-certificate -a -p /System/Library/Keychains/SystemRootCertificates.keychain /Library/Keychains/System.keychain > $HOME/.local/ssl/cert.pem'

if [[ $(uname) == Linux ]]
then
	alias copy='copy --reflink=auto'
	alias mwinit="mwinit --aea -s -o"
fi

export EDITOR="vim"

# Fix to make vim work with color themes
if [[ $TERM != linux ]]
then
	export TERM=xterm-256color
fi

# Path fix for RHEL/Debian
export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin

# Add RVM to PATH
export PATH="$PATH:$HOME/.rvm/bin"

# Add Rust cargo to PATH
export PATH="$HOME/.cargo/bin:$PATH"

# Add go binaries to PATH
export PATH="$HOME/go/bin:$PATH"

# Add linuxbrew to path
if [[ -e /home/linuxbrew/.linuxbrew ]]; then
	eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
fi

# Add mac brew to path
if [[ -e /opt/homebrew/bin/brew ]]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Use NVM if it is installed
export NVM_DIR="$(realpath "$HOME/.nvm")"

if [[ -e $NVM_DIR ]]; then
	load_nvm(){
		unset -f nvm
		[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
	}

	nvm(){
		if [[ $(type nvm) =~ "load_nvm" ]] || [[ $(type nvm) =~ "sharedrc" ]]; then
			load_nvm
		fi
		nvm "$@"
	}

	node_version="$(cat $HOME/.nvm/alias/default)"
	eval "$(
	for i in $NVM_DIR/versions/node/*${node_version}*/bin/*; do
		binary="${i#*bin/}"
		cat <<-EOF
		$binary() {
			if [[ \$(type nvm) =~ "load_nvm" ]] || [[ \$(type nvm) =~ "sharedrc" ]]; then
				load_nvm
			fi
			unset -f $binary
			$binary \$@
		}
		EOF
	done)"
fi

# Enable python virtualenvs
if [[ -e $HOME/.pyenv ]]; then
	export PYENV_ROOT="$HOME/.pyenv"
	export PATH="$PYENV_ROOT/bin:$PATH"
	export WORKON_HOME=$HOME/.virtualenvs

	eval "$(pyenv init --path)"
	eval "$(pyenv init -)"

	init_virtualenvwrapper() {
		pyenv virtualenvwrapper_lazy
	}

	# Wrappers for virtualenv wrapper to load on-demand only
	mkvirtualenv() {
		unset -f mkvirtualenv
		init_virtualenvwrapper
		mkvirtualenv "$@"
	}

	rmvirtualenv() {
		unset -f rmvirtualenv
		init_virtualenvwrapper
		rmvirtualenv "$@"
	}

	workon() {
		unset -f workon
		init_virtualenvwrapper
		workon "$@"
	}

fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
if $(which conda &>/dev/null); then
	__conda_setup="$('/usr/bin/conda' "shell.${SHELL##*/}" 'hook' 2> /dev/null)"
	if [ $? -eq 0 ]; then
		eval "$__conda_setup"
	else
		if [ -f "/usr/etc/profile.d/conda.sh" ]; then
			. "/usr/etc/profile.d/conda.sh"
		else
			export PATH="/usr/bin:$PATH"
		fi
	fi
	unset __conda_setup
fi
# <<< conda initialize <<<


# CDK helpers
cdk-add() {
	packages=""
	for target in "$@"; do
		packages+=" @aws-cdk/aws-$target"
	done
	echo "Adding: $packages"
	if [[ $SHELL =~ zsh ]]; then
		yarn add ${=packages}
	else
		yarn add $packages
	fi
}

# Source nix if it is available
NIX_PATH="$HOME/.nix-profile/etc/profile.d/nix.sh"
if [[ -e $NIX_PATH ]]; then
	. $NIX_PATH
fi

# tabtab source for packages
# uninstall by removing these lines
[ -f ~/.config/tabtab/__tabtab.bash ] && . ~/.config/tabtab/__tabtab.bash || true

# https://gnunn1.github.io/tilix-web/manual/vteconfig/
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte.sh
fi

# Disable homebrew auto-updating and cleaning and stuff all the time
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALL_CLEANUP=1

# Don't use goproxy, doesn't work on certain networks
export GOPROXY=direct

# Amazon Toolbox
export JAVA_TOOLS_OPTIONS="-Dlog4j2.formatMsgNoLookups=true"
export PATH=$PATH:$HOME/.toolbox/bin
[[ -e $HOME/.sharedrc-addon-late ]] && source $HOME/.sharedrc-addon-late
