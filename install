#!/bin/bash
set -e
DOTFILES=$(cd "$(dirname "$0")";pwd)

# TODO: Change to using tput for colours instead of echo -e for OS X (copy from securenotes)

# Hacky shit to make OS X work like an actual unix system
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
enable -n echo

# OS Detection / OS Specific variables
TYPE=linux
if [[ -f /etc/os-release ]]; then
	RELEASE=$(grep '^NAME="' /etc/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif [[ -f /usr/lib/os-release ]]; then
	RELEASE=$(grep '^NAME="' /usr/lib/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif uname -a|grep -qi darwin > /dev/null 2>&1; then
	RELEASE="mac"
	TYPE=mac
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]; then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

ok() {
	echo -e "[ \e[1;32mOK\e[00m ]"
}

failed() {
	echo -e "[\e[1;31mFAILED\e[00m]"
}

check() {
case $1 in
	0) ok ;;
	*) failed ;;
esac
}

cleanup() {
	check $?
	exit 1
}

systemctl() {
	local task=$1
	local service=$2
	if which systemctl > /dev/null 2>&1; then
	    $sudo systemctl $task $service
	elif which service > /dev/null 2>&1; then
	    $sudo service $service $task
	fi
	# Need to detect/restart service on OS X
}

install_powerline_fonts() {
	echo -n "Installing powerline fonts... "
	if [[ -d $DOTFILES/.powerline-fonts ]]; then
		(cd $DOTFILES/.powerline-fonts && git pull &>/dev/null)
	else
		git clone https://github.com/powerline/fonts.git $DOTFILES/.powerline-fonts &>/dev/null
	fi
	"$DOTFILES/.powerline-fonts/install.sh" &> /dev/null
	ok
}

install_dotfiles() {
	local TARGET_SCRIPT
	echo -n "Copying base dotfiles... "
	rsync -a "$DOTFILES/install-files/files/" ~/
	ok

	if [[ ! -z "$target" ]]; then
		TARGET_SCRIPT="$DOTFILES/install-files/per-target/$target-script"
		echo -n "Copying $target config... "
		rsync -a "$DOTFILES/install-files/per-target/$target/" ~/
		ok

		if [[ -f $TARGET_SCRIPT ]]; then
			echo -n "Running $target script... "
			"$TARGET_SCRIPT"
			ok
		fi
	fi
}

update_scripts() {
	echo -n "Updating scripts... "
	if [[ -d $DOTFILES/.scripts ]]; then
		(cd $DOTFILES/.scripts && git pull &>/dev/null)
	else
		git clone https://github.com/justin8/scripts.git $DOTFILES/.scripts &>/dev/null
	fi
	ok
}

install_scripts() {
	echo -n "Configuring scripts... "
	mkdir -p "$HOME/.bin"
	mkdir -p "$HOME/.zsh-completion"
	link_scripts scripts
	link_scripts $TYPE-scripts
	ok
}

link_scripts() {
	local script_path
	local zsh_completion_path
	while read -r script; do
		script_path="$DOTFILES/.scripts/$script"
		zsh_completion_path="$DOTFILES/scripts/zsh-completion/_$script"
		ln -sf "$script_path" "$HOME/.bin/${script##*/}"
		if [[ -f "$zsh_completion_path" ]]; then
			ln -sf "$zsh_completion_path" "$HOME/.zsh-completion/_$script"
		fi
	done < "$DOTFILES/install-files/$1"
}

configure_gitconfig() {
	echo -n "Configuring gitconfig... "
	git config --global user.signingkey 458CA9C74F0BC0EE
	git config --global commit.gpgsign true
	git config --global push.default current
	git config --global color.ui auto
	git config --global merge.conflictstyle diff3
	git config --global core.editor vim
	ok
}

configure_vim() {
	install_vimplug
	install_vim_plugins
	install_ycm
}

install_vimplug() {
	echo -n "Installing/updating vimplug... "
	if [[ -f ~/.vim/autoload/plug.vim ]]; then
		# Vim always seems to have a return of 1...
		vim -esu ~/.vimrc +PlugUpgrade +qa || true
	else
		mkdir -p ~/.vim/autoload
		curl -sSfLo ~/.vim/autoload/plug.vim \
			https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	fi
	ok
}

install_vim_plugins() {
	echo -n "Installing vim plugins... "
	# Vim always seems to have a return of 1...
	vim -esu ~/.vimrc +PlugClean! +PlugUpdate +qa || true
	ok
}

install_ycm() {
	# update ycm if libraries have changed and need compilation, or it is a new install
	if yes | vim +q 2>&1 | grep -q YCM; then
		echo -n "Building YouCompleteMe... "
		python2 ~/.vim/plugged/YouCompleteMe/install.py \
			--clang-completer \
			--tern-completer \
			--gocode-completer &> /dev/null
		ok
	fi
}

create_package_list() {
	local TARGET_PACKAGES

	if [[ $RELEASE != false ]]; then
		PACINST=$(cat "$DOTFILES/install-files/$RELEASE-packages")
		if [[ ! -z "$target" ]]; then
			TARGET_PACKAGES="$DOTFILES/install-files/per-target/$target-packages"
			if [[ -f  $TARGET_PACKAGES ]]; then
				PACINST="$PACINST $(cat "$TARGET_PACKAGES")"
			fi
		fi
	fi
}

run_custom_install_scripts() {
	local script="$DOTFILES/install-files/${RELEASE}-custom-install-script"
	if [[ $RELEASE != false ]] && [[ -x $script ]]; then
		echo -n "Running custom scripts for $RELEASE..."
		bash "$script"
		ok
	fi

	echo -n "Running custom scripts... "
	bash "$DOTFILES/install-files/custom-install-script"
	ok
}

install_packages_meta() {
	echo "Verifying required packages are installed."
	case $RELEASE in
		'Arch') install_packages_arch ;;
		'Debian'|'Ubuntu') install_packages_debian ;;
		'mac') install_packages_mac ;;
		*)
			cat <<-EOF
			You are not using a supported distro; You may have to install some of the following manually:
			$(cat "$DOTFILES/install-files/"*packages)

			Once you have; press enter to continue
			EOF
			read
			;;
	esac
}

install_homebrew() {
	if ! which brew &>/dev/null; then
		echo "Installing brew... "
		ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		sudo xcodebuild -license accept
		brew doctor
	fi
}

configure_homebrew() {
	# Nothing to do here currently
	echo >/dev/null
}

install_packages_mac() {
	local cur_packages
	local package
	echo "OS appears to be Mac OS X..."

	echo "Installing required packages... "
	install_homebrew
	configure_homebrew

	cur_packages=$(brew list 2>/dev/null)
	echo "$PACINST" | while read package; do
		if ! echo "$cur_packages" | grep -q -- "${package%% *}"; then
			brew install $package &>/dev/null
		fi
	done
	echo "Since you are running OS X. Please check that \"Defaults env_keep += 'SSH_TTY'\" and \"Defaults env_keep += 'IHAVEPATCHEDFONTS'\" are in sudoers"
}

install_packages_debian() {
			echo "OS appears to be Debian/Ubuntu..."

			echo -n "Installing required packages..."
			$sudo apt-get install -y $PACINST &>/dev/null
			ok
}

install_packages_arch() {
	echo "OS appears to be Arch Linux..."

	set +e
	echo -n "Installing required packages... "
	if ! which vim &>/dev/null; then
		# Only install if it isn't already there. gvim adds +X11 config to the build,
		# but also a ton of X deps, so we don't want it on a headless machine
		pacman -S --noconfirm --noprogress --needed vim &> /dev/null
	fi
	$sudo pacman -Sy --noprogress --needed --noconfirm $PACINST &>/dev/null
	rc=$?
	check $rc
	set -e

	if [[ $rc != 0 ]]; then
		cat <<-EOF
		An error has occurred while installing required packages!
		Please try to install the following packages manually:
		$PACINST
		EOF
		if [[ $(uname -m) == 'x86_64' ]]; then
			exit 1
		else
			echo 'Continuing anyway since some packages are unavailable outside of x86_64'
		fi
	fi
}

configure_sshd() {
	local sshd_config="/etc/ssh/sshd_config"

	if [[ -e $sshd_config ]]; then
		echo -n "Checking SSHD config... "
		if grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config &>/dev/null; then
			ok
		else
			if grep -q "AcceptEnv" $sshd_config; then
				$sudo sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
			else
				echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
			fi
			ok

			echo -n "Restarting SSHD... "
			systemctl restart sshd
			ok
		fi
	fi
}

configure_sudoers() {
	if [[ -d /etc/sudoers.d ]]; then
		if ! sudo test -f /etc/sudoers.d/patched-fonts; then
			echo -n "Applying sudoers config... "
			echo -e 'Defaults\tenv_keep += "SSH_TTY"\nDefaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee /etc/sudoers.d/patched-fonts > /dev/null
			ok
		fi
	fi
}

configure_ssh_client() {
	local orig_ssh_config
	echo -n "Checking SSH client config... "
	if ! [[ -d "$HOME/.ssh" ]]; then
		mkdir "$HOME/.ssh"
		chmod 700 "$HOME/.ssh"
	fi
	if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'SendEnv IHAVEPATCHEDFONTS' "$HOME/.ssh/config" &> /dev/null; then
		if [[ -f $HOME/.ssh/config ]]; then
			orig_ssh_config=$(cat "$HOME/.ssh/config")
		else
			orig_ssh_config=""
		fi
		echo "SendEnv IHAVEPATCHEDFONTS" > "$HOME/.ssh/config"
		echo "$orig_ssh_config" >> "$HOME/.ssh/config"
	fi

	# Disabled until paramiko and openwrt can support newer ciphers
	#if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'Ciphers chacha20' "$HOME/.ssh/config" &> /dev/null
	#then
	#	cat <<-EOF >> "$HOME/.ssh/config"
	#
	#		Host *
	#		    Ciphers chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
	#		    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com
	#	EOF
	#fi
	ok
}

configure_zshrc_addon() {
	echo -n "Configuring zshrc-addon... "
	touch ~/.zshrc-addon > /dev/null
	if ! grep -qE 'SSH_TTY' ~/.zshrc-addon; then
		cat <<-EOF > ~/.zshrc-addon

		if [[ -z \$SSH_TTY ]] && [[ \$TERM != linux ]]; then
			export IHAVEPATCHEDFONTS=1
		fi
		EOF
	fi
	ok
}

configure_oh_my_zsh() {
	echo -n "Configuring oh-my-zsh... "
	if [[ -d ~/.oh-my-zsh ]]; then
		cd ~/.oh-my-zsh
		git reset --hard origin/master > /dev/null 2>&1
		git pull > /dev/null 2>&1
	else
		git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh > /dev/null 2>&1
	fi
	ok
}

configure_oh_my_zsh_plugins() {
	echo -n "Configuring oh-my-zsh plugins... "
	for plugin in zsh-users/zsh-syntax-highlighting; do
		plugindir="$HOME/.oh-my-zsh/custom/plugins/${plugin#*/}"
		if [[ -d $plugindir ]]; then
			cd "$plugindir"
			git reset --hard origin/master > /dev/null 2>&1
			git pull > /dev/null 2>&1
		else
			git clone https://github.com/${plugin}.git "$plugindir" > /dev/null 2>&1
		fi
	done
	ok
}

change_shell() {
	local setshell=0
	local newshell=zsh
	[[ $(uname -r) =~ -c9 ]] && newshell=bash
	echo -n "Changing shell to $newshell "
	if [[ $TYPE == 'mac' ]]; then
		if ! finger "$USER" | grep -q "Shell.*$newshell"; then
			setshell=1
		fi
	else
		if ! getent passwd "$USER" | grep -q $newshell; then
			setshell=1
		fi
	fi

	if [[ $setshell == 1 ]]; then
		if which $newshell > /dev/null; then
			$sudo chsh -s "$(which $newshell)" "$USER"
		fi
	fi
	ok
}

set_targets() {
	if [[ -n $target ]]; then
		for i in $(get_targets); do
			[[ $target == "$i" ]] && found_target=true
		done
		if [[ -z $found_target ]]; then
			echo "Target $target not found! Aborting."
			exit 1
		fi
	else
		# Auto-detect when running on C9
		if sysctl kernel.osrelease 2>&1 | grep -q -- '-c9'; then
			target=c9
		fi

		if [[ $HOSTNAME =~ ^dev-dsk ]]; then
			target=dev-dsk
		fi

		if [[ $(uname -m) =~ arm ]]; then
			target=arm
		fi
	fi
}

get_targets() {
	echo -n $(cd "$DOTFILES/install-files/per-target";ls -d ./*/|sed 's#/$##;s#^./##'|tr '\n' ' ')
}

usage() {
	cat <<-EOF
	usage: $(basename "$0") options

	This script will install config dotfiles for the current user and alter some minor system-level settings

	OPTIONS:
	-h	Show this help
	-n	No system changes, no packages will be installed and no system level changes will be made
	-t	Target, can be one of: $(get_targets)
	EOF
}

if which sudo > /dev/null 2>&1; then
    sudo=sudo
elif [[ $UID != 0 ]]; then
    echo "This script requires either sudo or root"
    exit 1
fi

while getopts ":hngt:" OPTION; do
	case $OPTION in
		h) usage;exit 0;;
		n) nosystemchanges=true;;
		t) target="$OPTARG";;
		?) usage;exit 1;;
	esac
done
shift $(( OPTIND -1 ))

trap cleanup EXIT SIGINT SIGTERM
set_targets
create_package_list

if [[ -z "$nosystemchanges" ]]; then
	install_packages_meta
	configure_sshd
	configure_sudoers
fi

run_custom_install_scripts
configure_ssh_client
install_powerline_fonts
configure_gitconfig
install_dotfiles
update_scripts
install_scripts
configure_vim
configure_zshrc_addon
configure_oh_my_zsh
configure_oh_my_zsh_plugins
change_shell

echo "If you want local terminals to not use the agnoster theme, disable the font configuration in ~/.zshrc-addon"
