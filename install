#!/bin/bash
set -e
DOTFILES=$(cd "$(dirname "$0")";pwd)

# TODO: Change to using tput for colours instead of echo -e for OS X (copy from securenotes)

# Hacky shit to make OS X work like an actual unix system
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
enable -n echo

# OS Detection / OS Specific variables
if [[ -f /etc/os-release ]]; then
	RELEASE=$(grep '^NAME="' /etc/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif [[ -f /usr/lib/os-release ]]; then
	RELEASE=$(grep '^NAME="' /usr/lib/os-release | sed -E 's/NAME="([a-zA-Z]+).*/\1/')
elif uname -a|grep -qi darwin > /dev/null 2>&1; then
	RELEASE="Mac"
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]; then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

ok() {
	echo -e "[ \e[1;32mOK\e[00m ]"
}

failed() {
	echo -e "[\e[1;31mFAILED\e[00m]"
}

check() {
case $1 in
	0) ok ;;
	*) failed ;;
esac
}

cleanup() {
	check $?
	exit 1
}

systemctl() {
	local task=$1
	local service=$2
	if which systemctl > /dev/null 2>&1; then
	    $sudo systemctl $task $service
	elif which service > /dev/null 2>&1; then
	    $sudo service $service $task
	fi
	# Need to detect/restart service on OS X
}

install_powerline_fonts() {
	echo -n "Installing powerline fonts... "
	if [[ -d $DOTFILES/.powerline-fonts ]]; then
		(cd "$DOTFILES/.powerline-fonts" && git pull &>/dev/null)
	else
		git clone https://github.com/powerline/fonts.git "$DOTFILES/.powerline-fonts" &>/dev/null
	fi
	"$DOTFILES/.powerline-fonts/install.sh" &> /dev/null
	ok
}

install_dotfiles() {
	echo -n "Copying base dotfiles... "
	rsync -a "$DOTFILES/install-files/files/" ~/
	ok
}

install_nvm() {
	echo -n "Installing nvm... "
	if [[ ! -e $HOME/.nvm ]]; then
		NVM_DIR_TEMP="$NVM_DIR"
		unset NVM_DIR
		curl -sSo- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash &>/dev/null
		export NVM_DIR="$NVM_DIR_TEMP"
	fi
	ok
}

update_scripts() {
	echo -n "Updating scripts... "
	if [[ -d $DOTFILES/.scripts ]]; then
		(cd "$DOTFILES/.scripts" && git pull &>/dev/null)
	else
		git clone https://github.com/justin8/scripts.git "$DOTFILES/.scripts" &>/dev/null
	fi
	ok
}

install_scripts() {
	echo -n "Configuring scripts... "
	mkdir -p "$HOME/.local/bin"
	mkdir -p "$HOME/.zsh-completion"
	link_scripts scripts
	ok
}

link_scripts() {
	local script_path
	local zsh_completion_path
	while read -r script; do
		script_path="$DOTFILES/.scripts/$script"
		ln -sf "$script_path" "$HOME/.local/bin/${script##*/}"
	done < "$DOTFILES/install-files/$1"
}

configure_gitconfig() {
	echo -n "Configuring gitconfig... "
	git config --global push.default current
	git config --global color.ui auto
	git config --global merge.conflictstyle diff3
	git config --global core.editor vim
	git config --global pull.rebase true
	git config --global pull.autostash true
	git config --global rebase.autostash true

	# CodeCommit support
	git config --global credential.helper '!aws codecommit credential-helper $@'
	git config --global credential.UseHttpPath true

	# GPG signing
	if [[ $gpgsigning == true ]]; then
		git config --global user.signingkey 458CA9C74F0BC0EE
		git config --global commit.gpgsign true
	fi
	ok
}

configure_vim() {
	mkdir -p ~/.local/tmp
	install_vimplug
	install_vim_plugins
}

install_vimplug() {
	echo -n "Installing/updating vimplug... "
	if [[ -f ~/.vim/autoload/plug.vim ]]; then
		# Vim always seems to have a return of 1...
		vim -esu ~/.vimrc +PlugUpgrade +qa || true
	else
		mkdir -p ~/.vim/autoload
		curl -sSfLo ~/.vim/autoload/plug.vim \
			https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	fi
	ok
}

install_vim_plugins() {
	echo -n "Installing vim plugins... "
	# Vim always seems to have a return of 1...
	vim -esu ~/.vimrc +PlugClean! +PlugUpdate +qa || true
	ok
}

install_pyenv() {
	echo -n "Installing/updating pyenv... "
	git_update "https://github.com/pyenv/pyenv.git" "$HOME/.pyenv"
	git_update "https://github.com/yyuu/pyenv-virtualenvwrapper.git" "$HOME/.pyenv/plugins/pyenv-virtualenvwrapper"
	ok
}

create_package_list() {
	PACINST=$(cat "$DOTFILES/install-files/$RELEASE/packages")
}

run_custom_install_scripts() {
	local script="$DOTFILES/install-files/${RELEASE}/install-script"
	if [[ $RELEASE != false ]] && [[ -x $script ]]; then
		echo -n "Running custom scripts for $RELEASE..."
		bash "$script"
		ok
	fi
}

install_packages_meta() {
	echo "Verifying required packages are installed."
	case $RELEASE in
		'Arch') install_command=install_packages_arch ;;
		'Debian'|'Ubuntu'|'Raspbian') install_command=install_packages_debian ;;
		'Mac') install_command=install_packages_mac ;;
		'Amazon') install_command=install_packages_amazon ;;
		*)
			cat <<-EOF
			You are not using a supported distro; package installation has been enabled, but cannot proceed.

			Press enter to continue anyway, or ctrl+c to cancel
			EOF
			read -r
			return
			;;
	esac

	create_package_list
	$install_command
}

install_homebrew() {
	if ! which brew &>/dev/null; then
		echo "Installing brew... "
		ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		sudo xcodebuild -license accept
		brew doctor
	fi
}

configure_homebrew() {
	# Nothing to do here currently
	echo >/dev/null
}

install_packages_mac() {
	local cur_packages
	local package
	echo "OS appears to be Mac OS X..."

	echo "Installing required packages... "
	install_homebrew
	configure_homebrew

	cur_packages=$(brew list 2>/dev/null)
	echo "$PACINST" | while read -r package; do
		if ! echo "$cur_packages" | grep -q -- "${package%% *}"; then
			if ! (brew install $package &>/dev/null || brew upgrade $package &>/dev/null); then
				echo "Failed to install $package"
				return 1
			fi
		fi
	done

	install_packages_mac_gnu_symlinks
	echo "Since you are running OS X. Please check that \"Defaults env_keep += 'SSH_TTY'\" and \"Defaults env_keep += 'IHAVEPATCHEDFONTS'\" are in sudoers"
}

install_packages_mac_gnu_symlinks() {
	echo -n "Creating symlinks for GNU packages to the correct names..."
	gnu_packages=(
		ed
		findutils
		gnu-indent
		gnu-sed
		gnu-tar
		gnu-which
		grep)

	gnubin="$HOME/.local/gnubin"
	mkdir -p "$gnubin"
	for package in "${gnu_packages[@]}"; do
		for binary in /usr/local/opt/$package/libexec/gnubin/*; do
			ln -sf "$binary" "$gnubin/${binary##*/}"
		done
	done
	ok
}

install_packages_debian() {
	echo "OS appears to be Debian/Ubuntu..."

	echo -n "Installing required packages..."
	$sudo apt-get install -y $PACINST &>/dev/null
	ok
}

install_packages_arch() {
	echo "OS appears to be Arch Linux..."

	set +e
	echo -n "Installing required packages... "
	if ! which vim &>/dev/null; then
		# Only install if it isn't already there. gvim adds +X11 config to the build,
		# but also a ton of X deps, so we don't want it on a headless machine
		pacman -S --noconfirm --noprogress --needed vim &> /dev/null
	fi
	$sudo pacman -Sy --noprogress --needed --noconfirm $PACINST &>/dev/null
	rc=$?
	check $rc
	set -e

	if [[ $rc != 0 ]]; then
		cat <<-EOF
		An error has occurred while installing required packages!
		Please try to install the following packages manually:
		$PACINST
		EOF
		if [[ $(uname -m) == 'x86_64' ]]; then
			exit 1
		else
			echo 'Continuing anyway since some packages are unavailable outside of x86_64'
		fi
	fi
}

install_packages_amazon() {
	echo "OS appears to be Amazon Linux..."
	
	echo -n "Installing required packages..."
	$sudo yum install -y $PACINST &>/dev/null
	ok
}

configure_sshd() {
	local sshd_config="/etc/ssh/sshd_config"
	local ssh_daemon="sshd"
	[[ $RELEASE == Raspbian ]] && ssh_daemon=ssh

	if [[ -e $sshd_config ]]; then
		echo -n "Checking SSHD config... "
		if grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config &>/dev/null; then
			ok
		else
			if grep -q "AcceptEnv" $sshd_config; then
				$sudo sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
			else
				echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
			fi
			ok

			echo -n "Restarting SSHD... "
			systemctl restart $ssh_daemon
			ok
		fi
	fi
}

configure_sudoers() {
	if [[ -d /etc/sudoers.d ]]; then
		if ! sudo test -f /etc/sudoers.d/patched-fonts; then
			echo -n "Applying sudoers config... "
			echo -e 'Defaults\tenv_keep += "SSH_TTY"\nDefaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee /etc/sudoers.d/patched-fonts > /dev/null
			ok
		fi
	fi
}

configure_ssh_client() {
	local orig_ssh_config
	echo -n "Checking SSH client config... "
	if ! [[ -d "$HOME/.ssh" ]]; then
		mkdir "$HOME/.ssh"
		chmod 700 "$HOME/.ssh"
	fi
	if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'SendEnv IHAVEPATCHEDFONTS' "$HOME/.ssh/config" &> /dev/null; then
		if [[ -f $HOME/.ssh/config ]]; then
			orig_ssh_config=$(cat "$HOME/.ssh/config")
		else
			orig_ssh_config=""
		fi
		echo "SendEnv IHAVEPATCHEDFONTS" > "$HOME/.ssh/config"
		echo "$orig_ssh_config" >> "$HOME/.ssh/config"
		chmod 0600 "$HOME/.ssh/config"
	fi

	# Disabled until paramiko and openwrt can support newer ciphers
	#if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'Ciphers chacha20' "$HOME/.ssh/config" &> /dev/null
	#then
	#	cat <<-EOF >> "$HOME/.ssh/config"
	#
	#		Host *
	#		    Ciphers chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
	#		    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com
	#	EOF
	#fi
	ok
}

configure_rc_addon() {
	echo -n "Configuring zshrc-addon... "
	touch ~/.{zsh,shared}rc-addon > /dev/null
	if ! grep -qE 'SSH_TTY' ~/.zshrc-addon; then
		cat <<-EOF > ~/.zshrc-addon

		if [[ -z \$SSH_TTY ]] && [[ \$TERM != linux ]]; then
			export IHAVEPATCHEDFONTS=1
		fi
		EOF
	fi
	ok
}

configure_oh_my_zsh() {
	echo -n "Configuring oh-my-zsh... "
	git_update "https://github.com/robbyrussell/oh-my-zsh.git" "$HOME/.oh-my-zsh"
	ok
}

git_update() {
	repo="$1"
	dest="$2"
	if [[ -d "$dest" ]]; then
		cd "$dest"
		git reset --hard origin/master > /dev/null 2>&1
		git pull > /dev/null 2>&1
	else
		git clone "$repo" "$dest" > /dev/null 2>&1
	fi
}

configure_oh_my_zsh_plugins() {
	echo -n "Configuring oh-my-zsh plugins... "
	for plugin in zsh-users/zsh-syntax-highlighting; do
		plugindir="$HOME/.oh-my-zsh/custom/plugins/${plugin#*/}"
		if [[ -d $plugindir ]]; then
			cd "$plugindir"
			git reset --hard origin/master > /dev/null 2>&1
			git pull > /dev/null 2>&1
		else
			git clone https://github.com/${plugin}.git "$plugindir" > /dev/null 2>&1
		fi
	done
	ok
}

change_shell() {
	local setshell=0
	local newshell=zsh
	echo -n "Changing shell to $newshell "
	if [[ $RELEASE == 'Mac' ]]; then
		if ! finger "$USER" | grep -q "Shell.*$newshell"; then
			setshell=1
		fi
	else
		if ! getent passwd "$USER" | grep -q $newshell; then
			setshell=1
		fi
	fi

	if [[ $setshell == 1 ]]; then
		if which $newshell > /dev/null; then
			$sudo chsh -s "$(which $newshell)" "$USER"
		fi
	fi
	ok
}

usage() {
	cat <<-EOF
	usage: $(basename "$0") options

	This script will install config dotfiles for the current user and alter some minor system-level settings

	OPTIONS:
	-h	Show this help
	-s	Perform system changes, system level changes will be made (e.g. to /etc)
	-n	No packages will be installed
	-g	Enable GPG signing in git
	EOF
}

if which sudo > /dev/null 2>&1; then
    sudo=sudo
elif [[ $UID != 0 ]]; then
    echo "This script requires either sudo or root"
    exit 1
fi

while getopts ":hnsg" OPTION; do
	case $OPTION in
		h) usage;exit 0;;
		n) nopackages=true;;
		s) systemchanges=true;;
		g) gpgsigning=true;;
		?) usage;exit 1;;
	esac
done
shift $(( OPTIND -1 ))

trap cleanup EXIT SIGINT SIGTERM

if [[ $nopackages != true ]]; then
	install_packages_meta
fi

if [[ $systemchanges == true ]]; then
	configure_sshd
	configure_sudoers
fi

configure_ssh_client
install_powerline_fonts
configure_gitconfig
install_nvm
install_dotfiles
update_scripts
install_scripts
install_pyenv
configure_vim
configure_rc_addon
configure_oh_my_zsh
configure_oh_my_zsh_plugins
change_shell
run_custom_install_scripts

echo "If you want local terminals to not use the agnoster theme, disable the font configuration in ~/.zshrc-addon"
trap - EXIT SIGINT SIGTERM
