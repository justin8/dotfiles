#!/bin/bash
DOTFILES=$(cd "$(dirname "$0")";pwd)
sshd_config="/etc/ssh/sshd_config"

# Hacky shit to make OS X work like an actual unix system
PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
enable -n echo
DEFNAMEMACBREW="ed gnu-sed gnu-tar coreutils findutils gnu-indent gnu-which grep wdiff"

# OS Detection / OS Specific variables
TYPE=linux
if [[ -f /etc/arch-release ]]
then
	RELEASE="Arch Linux"
elif [[ -f /etc/os-release ]]
then
	RELEASE=$(grep "^NAME=" /etc/os-release)
elif uname -a|grep -qi darwin > /dev/null 2>&1
then
	RELEASE="Darwin"
	TYPE=mac
	sshd_config="/etc/sshd_config"
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]
then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

function ok {
	echo -e "[ \e[1;32mOK\e[00m ]"
}

function failed {
	echo -e "[\e[1;31mFAILED\e[00m]"
}

function check {
case $1 in
	0) ok ;;
	*) failed ;;
esac
}

function cleanup {
	check $?
}

function autorestart {
	if which systemctl > /dev/null 2>&1; then
	    $sudo systemctl restart "$1"
	elif which service > /dev/null 2>&1; then
	    $sudo service "$1" restart
	fi
	# Need to detect/restart service on OS X
	# Need to let user know if SSHD needs restarting manually
}

function update_submodules {
	cd "$DOTFILES"
	git submodule update --init --recursive > /dev/null 2>&1
}

function get_targets {
	echo -n $(cd "$DOTFILES/install-files/per-target";ls -d ./*/|sed 's#/$##;s#^./##'|tr '\n' ' ')
}

function usage {
	cat <<-EOF
	usage: $(basename "$0") options

	This script will install config dotfiles for the current user and alter some minor system-level settings

	OPTIONS:
	-h	Show this help
	-n	No system changes, no packages will be installed and no system level changes will be made
	-t	Target, can be one of: $(get_targets)
	-g	GUI, install basic GUI settings. This is installed by most targets already
	EOF
}

if which sudo > /dev/null 2>&1; then
    sudo=sudo
elif [[ $UID != 0 ]]; then
    echo "This script requires either sudo or root"
    exit 1
fi

while getopts ":hngt:" OPTION
do
	case $OPTION in
		h) usage;exit 0;;
		n) nosystemchanges=true;;
		g) gui=true;;
		t) target="$OPTARG";;
		?) usage;exit 1;;
	esac
done
shift $(( OPTIND -1 ))

#per-target options
case $target in
	ironwood) gui=true;;
esac

if [[ -n $target ]]; then
	for i in $(get_targets)
	do
		[[ $target == "$i" ]] && found_target=true
	done
	if [[ -z $found_target ]]; then
		echo "Target $target not found! Aborting."
		exit 1
	fi
fi

# Create package lists
PACINST=$(cat "$DOTFILES/install-files/global-$TYPE-packages")

if [[ ! -z "$gui" ]]
then
	PACINST="$PACINST $(cat "$DOTFILES/install-files/gui-$TYPE-packages")"
fi

if [[ ! -z "$target" ]]
then
	PACINST="$PACINST $(cat "$DOTFILES/install-files/per-target/$target-packages")"
fi

trap cleanup EXIT SIGINT SIGTERM

echo "Verifying required packages are installed."
case $RELEASE in
	'Arch Linux')
		echo "OS appears to be Arch Linux..."

		if [[ -z "$nosystemchanges" ]]; then
			if [[ $(uname -m) == 'x86_64' ]]
			then
				echo -n "Configuring repo... "
				if ! pacman -Q dray-repo > /dev/null 2>&1
				then
					curl -o /tmp/dray-repo.pkg.tar.xz https://repo.dray.be/dray-repo-latest
					$sudo pacman -U --noconfirm /tmp/dray-repo.pkg.tar.xz > /dev/null
				fi
				ok
			fi

			set +e
			echo -n "Installing required packages... "
			$sudo pacman -Sy --noprogress --needed --noconfirm $PACINST &>/dev/null
			rc=$?
			check $rc
			set -e

			if [[ $rc != 0 ]]
			then
				cat <<-EOF
				An error has occurred while installing required packages!
				Please try to install the following packages manually:
				$PACINST
				EOF
				if [[ $(uname -m) == 'x86_64' ]]
				then
					exit 1
				else
					echo 'Continuing anyway since some packages are unavailable outside of x86_64'
				fi
			fi
		fi
		;;
	'Darwin')
		echo "OS appears to be Mac OS X..."
		if [[ -z "$nosystemchanges" ]]; then
			echo "Installing required packages... "
			if ! brew tap | grep -q dupes
			then
				brew tap homebrew/dupes
			fi

			brew list brew-cask &>/dev/null || brew install caskroom/cask/brew-cask
			cur_packages=$(brew list;brew cask list)

			for package in $DEFNAMEMACBREW
			do
				if ! echo "$cur_packages" | grep -q -- "$package"
				then
					brew install "$package" --with-default-names &>/dev/null
				fi
			done

			for package in $PACINST
			do
				if ! echo "$cur_packages" | grep -q -- "$package"
				then
					brew install "$package" &>/dev/null
				fi
			done
			echo "Since you are running OS X. Please check that 'Defaults env_keep += \"SSH_TTY\"' and 'Defaults env_keep += \"IHAVEPATCHEDFONTS\"' are in sudoers"
		fi
		;;
	*)
		cat <<-EOF
		You are not using Arch Linux; You may have to install some of the following manually:
		$(cat "$DOTFILES/install-files/"*packages)

		Once you have; press enter to continue
		EOF
		read
		;;
esac

echo -n "Installing powerline fonts... "
if [[ -d "$DOTFILES/.fonts" ]]
then
	git -C "$DOTFILES/.fonts" pull &> /dev/null
else
	git clone https://github.com/powerline/fonts.git "$DOTFILES/.fonts" &> /dev/null
fi
"$DOTFILES/.fonts/install.sh" &> /dev/null
ok

if [[ -z "$nosystemchanges" ]]; then
	echo -n "Checking SSHD config... "
	if grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config; then
		ok
	else
		if grep -q "AcceptEnv" $sshd_config; then
			$sudo sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
		else
			echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
		fi
		ok

		echo -n "Restarting SSHD... "
		autorestart sshd
		ok
	fi

	if [ -d /etc/sudoers.d ]; then
		if ! sudo test -f /etc/sudoers.d/patched-fonts; then
			echo -n "Applying sudoers config... "
			echo -e 'Defaults\tenv_keep += "SSH_TTY"\nDefaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee /etc/sudoers.d/patched-fonts > /dev/null
			ok
		fi
	fi
fi

echo -n "Checking SSH client config... "
ssh_client_config=0
if ! [[ -d "$HOME/.ssh" ]]
then
	mkdir "$HOME/.ssh"
	chmod 700 "$HOME/.ssh"
fi
if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'SendEnv IHAVEPATCHEDFONTS' "$HOME/.ssh/config" &> /dev/null
then
	if [[ -f $HOME/.ssh/config ]]
	then
		orig_ssh_config=$(cat "$HOME/.ssh/config")
	else
		orig_ssh_config=""
	fi
	echo "SendEnv IHAVEPATCHEDFONTS" > "$HOME/.ssh/config"
	echo "$orig_ssh_config" >> "$HOME/.ssh/config"
fi

# Disabled until paramiko and openwrt can support newer ciphers
#if ! [[ -e "$HOME/.ssh/config" ]] || ! grep -q 'Ciphers chacha20' "$HOME/.ssh/config" &> /dev/null
#then
#	cat <<-EOF >> "$HOME/.ssh/config"
#
#		Host *
#		    Ciphers chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
#		    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com
#	EOF
#fi
ok

echo -n "Updating submodules... "
update_submodules
ok

echo -n "Copying base dotfiles... "
rsync -a "$DOTFILES/install-files/global/" ~/
rsync -a "$DOTFILES/install-files/global-$TYPE/" ~/
ok

echo -n "Installing/updating vim-plug "
if [[ -f ~/.vim/autoload/plug.vim ]]
then
	# Vim always seems to have a return of 1...
	vim -esu ~/.vimrc +PlugUpgrade +qa || true
else
	mkdir -p ~/.vim/autoload
	curl -sSfLo ~/.vim/autoload/plug.vim \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi
ok

echo -n "Configuring vim plugins... "
if [[ $RELEASE == 'Arch Linux' ]]
then
	if ! pacman -Q | grep -q vim
	then
		pacman -S --noconfirm --noprogress --needed vim &> /dev/null
	fi
fi
# Vim always seems to have a return of 1...
vim -esu ~/.vimrc +PlugClean! +qa || true
vim -esu ~/.vimrc +PlugUpdate +qa || true
ok

echo -n "Running global script... "
"$DOTFILES/install-files/global-script"
"$DOTFILES/install-files/global-$TYPE-script"
ok

echo -n "Configuring zshrc-addon... "
touch ~/.zshrc-addon > /dev/null
if ! grep -qE 'PATH.*~/\.bin' ~/.zshrc-addon
then
	echo 'export PATH=~/.bin:$PATH' >> ~/.zshrc-addon
fi
ok

if [[ ! -z "$gui" ]]
then
	echo -n "Copying GUI config... "
	rsync -a "$DOTFILES/install-files/gui/" ~/
	rsync -a "$DOTFILES/install-files/gui-$TYPE/" ~/
	ok

	echo -n "Running GUI script... "
	"$DOTFILES/install-files/gui-script"
	"$DOTFILES/install-files/gui-$TYPE-script"
	ok
fi

if [[ ! -z "$target" ]]
then
	echo -n "Copying $target config... "
	rsync -a "$DOTFILES/install-files/per-target/$target/" ~/
	ok

	if [[ -f $DOTFILES/install-files/per-target/$target-script ]]
	then
		echo -n "Running $target script... "
		"$DOTFILES/install-files/per-target/$target-script"
		ok
	fi
fi

echo -n "Configuring oh-my-zsh... "
if [[ -d ~/.oh-my-zsh ]]
then
	cd ~/.oh-my-zsh
	git reset --hard origin/master > /dev/null 2>&1
	git pull > /dev/null 2>&1
else
	git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh > /dev/null 2>&1
fi
ok

echo -n "Changing shell to ZSH... "
setshell=0
if [[ $TYPE == 'mac' ]]
then
	if ! finger "$USER" | grep -q 'Shell.*zsh'
	then
		setshell=1
	fi
else
	if ! getent passwd "$USER" | grep -q zsh
	then
		setshell=1
	fi
fi

if [[ $setshell == 1 ]]
then
	if which zsh > /dev/null
	then
		$sudo chsh -s "$(which zsh)" "$USER"
	fi
fi
ok

echo "If you want local terminals to use the agnoster theme; copy and uncomment the font config section from .zshrc to .zshrc-addon"
trap - EXIT SIGINT SIGTERM
