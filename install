#!/bin/bash
DOTFILES=$(cd "$(dirname "$0")";pwd)
sshd_config="/etc/ssh/sshd_config"

# Hacky shit to make OS X work
MACBREW="zsh zsh-completion git gnu-sed gnu-tar shellcheck"
sed=sed

# OS Detection / OS Specific variables
if [[ -f /etc/os-release ]]
then
	RELEASE=$(grep "^NAME=" /etc/os-release)
elif [[ -f /etc/arch-release ]]
then
	RELEASE='Arch Linux'
elif uname -a|grep -qi darwin > /dev/null 2>&1
then
	RELEASE="Darwin"
	sshd_config="/etc/sshd_config"
	sed=gsed
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [[ ! -d $DOTFILES ]]
then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

function check {
case $1 in
	0)
		echo -e "[ \e[1;32mOK\e[00m ]"
		;;
	2)
		echo -e "[\e[1;33mFixing\e[00m]"
		;;
	*)
		echo -e "[\e[1;31mFAILED\e[00m]"
		;;
esac
}

function autorestart {
	if which systemctl > /dev/null 2>&1; then
	    $sudo systemctl restart "$1"
	elif which service > /dev/null 2>&1; then
	    $sudo service "$1" restart
	fi
	# Need to detect/restart service on OS X
	# Need to let user know if SSHD needs restarting manually
}

function update_submodules {
	cd "$DOTFILES"
	git submodule update --init --recursive > /dev/null 2>&1
}

function get_targets {
	echo -n $(cd "$DOTFILES/install-files/per-target";ls -d ./*/|sed 's#/$##;s#^./##'|tr '\n' ' ')
}

function usage {
	cat <<-EOF
	usage: $(basename "$0") options

	This script will install config dotfiles for the current user and alter some minor system-level settings

	OPTIONS:
	-h	Show this help
	-n	No system changes, no packages will be installed and no system level changes will be made
	-t	Target, can be one of: $(get_targets)
	-g	GUI, install basic GUI settings. This is installed by most targets already
	EOF
}

if which sudo > /dev/null 2>&1; then
    sudo=sudo
elif [[ $UID != 0 ]]; then
    echo "This script requires either sudo or root"
    exit 1
fi

while getopts ":hngt:" OPTION
do
	case $OPTION in
		h) usage;exit 0;;
		n) nosystemchanges=true;;
		g) gui=true;;
		t) target="$OPTARG";;
		?) usage;exit 1;;
	esac
done
shift $(( OPTIND -1 ))

#per-target options
case $target in
	ironwood|workdesktop|araucaria) gui=true;;
esac

if [[ -n $target ]]; then
	for i in $(get_targets)
	do
		[[ $target == "$i" ]] && found_target=true
	done
	if [[ -z $found_target ]]; then
		echo "Target $target not found! Aborting."
		exit 1
	fi
fi

# Check if running Arch Linux
echo "Verifying required packages are installed."
if echo $RELEASE|grep -qi "Arch Linux" > /dev/null 2>&1; then
	echo "OS appears to be Arch Linux..."

	if [[ -z "$nosystemchanges" ]]; then
		echo "Configuring repo..."
		if ! pacman -Q dray-repo > /dev/null 2>&1
		then
			curl -o /tmp/dray-repo.pkg.tar.xz https://repo.dray.be/dray-repo-latest
			$sudo pacman -U --noconfirm /tmp/dray-repo.pkg.tar.xz > /dev/null
		fi

		echo -n "Installing required packages... "
		PACINST=$(cat "$DOTFILES/install-files/global-packages")

		if [[ ! -z "$gui" ]]
		then
			PACINST="$PACINST $(cat "$DOTFILES/install-files/gui-packages")"
		fi

		if [[ ! -z "$target" ]]
		then
			PACINST="$PACINST $(cat "$DOTFILES/install-files/per-target/$target-packages")"
		fi

		$sudo pacman -Sy --noprogress --needed --noconfirm $PACINST 2>&1 | grep -v skipping
		rc=$?
		check $rc

		if [[ $rc != 0 ]]
		then
			cat <<-EOF
			An error has occurred while installing required packages!
			Please try to install the following packages manually:
			$PACINST
			EOF
			exit 1
		fi
	fi
	# Check if running OS X
elif echo $RELEASE|grep -qi darwin > /dev/null 2>&1; then
	echo "OS appears to be Mac OS X..."
	if [[ -z "$nosystemchanges" ]]; then
		for package in $MACBREW
		do
			brew list|grep "$package" > /dev/null 2>&1 || BREWINST="$BREWINST
			$package"
		done
		[[ $BREWINST == "" ]] || brew install $BREWINS
		echo "Since you are running OS X. Please ensure 'AcceptEnv' in /etc/sshd_config includes 'IHAVEPATCHEDFONTS'"
		echo "Also check that 'Defaults env_keep += \"SSH_TTY\"' and 'Defaults env_keep += \"IHAVEPATCHEDFONTS\"' are in sudoers"
	fi
else
	cat <<-EOF
	You are not using Arch Linux; You may have to install some of the following manually:
	$(cat "$DOTFILES/install-files/"*packages)

	Once you have; press enter to continue
	EOF
	read
fi


if [ "$RELEASE" == "Darwin" ]; then
	#echo -n "Copying OS X specific files... "
	#rsync -a "$DOTFILES/install-files/mac/" "~/" > /dev/null 2>&1
	#check $?
	echo > /dev/null
else
	echo "Copying fonts... "
	mkdir -p ~/.fonts/ ~/.config/fontconfig/conf.d
	rsync "$DOTFILES/install-files/fonts/"*.otf ~/.fonts/
	rsync "$DOTFILES/install-files/fonts/"*.conf ~/.config/fontconfig/conf.d/
	nohup fc-cache -f ~/.fonts > /dev/null 2>&1 &

fi

if [[ -z "$nosystemchanges" ]]; then
	echo -n "Checking SSHD config... "
	if grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config; then
		echo -e "[ \e[1;32mOK\e[00m ]"
	else
		echo -e "[\e[1;33mFixing\e[00m]"
		if grep -q "AcceptEnv" $sshd_config; then
			$sudo $sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
		else
			echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
		fi
		echo -n "Restarting SSHD... "
		autorestart sshd
		check $?
	fi

	if [ -d /etc/sudoers.d ]; then
		if ! sudo test -f /etc/sudoers.d/patched-fonts; then
			echo -n "Applying sudoers config... "
			echo -e 'Defaults\tenv_keep += "SSH_TTY"\nDefaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee /etc/sudoers.d/patched-fonts > /dev/null
			check $?
		fi
	fi
fi

echo -n "Checking SSH client config... "
ssh_client_config=0
if ! grep -q 'SendEnv IHAVEPATCHEDFONTS' "$HOME/.ssh/config" &> /dev/null
then
	ssh_client_config=1
	if [[ -f $HOME/.ssh/config ]]
	then
		orig_ssh_config=$(cat "$HOME/.ssh/config")
	else
		orig_ssh_config=""
	fi
	echo "SendEnv IHAVEPATCHEDFONTS" > "$HOME/.ssh/config"
	echo "$orig_ssh_config" >> "$HOME/.ssh/config"
fi

if ! grep -q 'Ciphers chacha20' "$HOME/.ssh/config" &> /dev/null
then
	ssh_client_config=1
	cat <<-EOF >> "$HOME/.ssh/config"
		
		Host *
		    Ciphers chacha20-poly1305@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
		    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com
	EOF
fi

if [[ $ssh_client_config -eq 0 ]]
then
	echo -e "[ \e[1;32mOK\e[00m ]"
else
	echo -e "[\e[1;33mFixing\e[00m]"
fi

echo -n "Updating submodules... "
update_submodules
check $?

echo -n "Copying base dotfiles... "
rsync -a "$DOTFILES/install-files/global/" ~/
check $?

echo -n "Installing/updating vim-plug "
if [[ -f ~/.vim/autoload/plug.vim ]]
then
	vim -esu ~/.vimrc +PlugUpgrade +qa
	# Vim always seems to have a return of 1...
	echo -e "[ \e[1;32mOK\e[00m ]"
else
	mkdir -p ~/.vim/autoload
	curl -fLo ~/.vim/autoload/plug.vim \
		https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	check $?
fi

# TODO: This can be removed in the future. Just cleaning up old vundle files.
rm -rf ~/.vim/bundle

echo -n "Configuring vim plugins... "
vim -esu ~/.vimrc +PlugClean! +qa
vim -esu ~/.vimrc +PlugUpdate +qa
# Vim always seems to have a return of 1...
echo -e "[ \e[1;32mOK\e[00m ]"

echo -n "Running global script... "
"$DOTFILES/install-files/global-script"
check $?

touch ~/.zshrc-addon > /dev/null
if ! grep -qE 'PATH.*~/\.bin' ~/.zshrc-addon
then
	echo 'export PATH=~/.bin:$PATH' >> ~/.zshrc-addon
fi

if [[ ! -z "$gui" ]]
then
	echo -n "Copying GUI config... "
	rsync -a "$DOTFILES/install-files/gui/" ~/
	check $?

	echo -n "Running GUI script... "
	"$DOTFILES/install-files/gui-script"
	check $?
fi

if [[ ! -z "$target" ]]
then
	echo -n "Copying $target config... "
	rsync -a "$DOTFILES/install-files/per-target/$target/" ~/
	check $?
	if [[ -f $DOTFILES/install-files/per-target/$target-script ]]
	then
		echo -n "Running $target script... "
		"$DOTFILES/install-files/per-target/$target-script"
		check $?
	fi
fi

echo -n "Configuring oh-my-zsh... "
if [[ -d ~/.oh-my-zsh ]]
then
	cd ~/.oh-my-zsh
	git reset --hard origin/master > /dev/null 2>&1
	git pull > /dev/null 2>&1
	check $?
else
	git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh > /dev/null 2>&1
	check $?
fi

echo "Changing shell to ZSH."
echo "$SHELL"|grep -q zsh || chsh -s "$(which zsh)"

echo "If you want local terminals to use the agnoster theme; copy and uncomment the font config section from .zshrc to .zshrc-addon"
