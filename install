#!/bin/bash
DOTFILES=$(cd "$(dirname "$0")";pwd)
sshd_config="/etc/ssh/sshd_config"

# Hacky shit to make OS X work
MACBREW="zsh zsh-completion git gnu-sed gnu-tar"
sed=sed
tar=tar

# OS Detection / OS Specific variables
if [ -f /etc/os-release ]
then
	RELEASE=`grep "^NAME=" /etc/os-release`
elif uname -a|grep -qi darwin > /dev/null 2>&1
then
	RELEASE="Darwin"
	sshd_config="/etc/sshd_config"
	sed=gsed
	tar=gnutar
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [ "x$DOTFILES" == "x" ]
then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

function check {
	rc=$1
	[[ $rc == 0 ]] && echo -e "[ \e[1;32mOK\e[00m ]"
	[[ $rc == 1 ]] && echo -e "[\e[1;31mFAILED\e[00m]"
	[[ $rc == 2 ]] && echo -e "[\e[1;33mFixing\e[00m]"
}

function autorestart {
	if which systemctl > /dev/null 2>&1; then
		$sudo systemctl restart $1
	elif which service > /dev/null 2>&1; then
		$sudo service $1 restart
	fi
	# Need to detect/restart service on OS X
	# Need to let user know if SSHD needs restarting manually
}

function usage {
cat << EOF
usage: $(basename $0) options

This script will install config dotfiles for the current user and alter some minor system-level settings

OPTIONS:
-h	Show this help
-n	No system changes, no packages will be installed and no system level changes will be made
-t	Target, can be one of $(cd $DOTFILES;ls -d */|sed 's#/$##'|tr '\n' ' ')
-g	GUI, install basic GUI settings. This is installed by most targets already
EOF
}

if which sudo > /dev/null 2>&1; then
	sudo=sudo
elif [[ $UID != 0 ]]; then
	echo "This script requires either sudo or root"
	exit 1
fi

while getopts ":hngt:" OPTION
do
	case $OPTION in
		h) usage;exit 0;;
		n) nosystemchanges=true;;
		g) gui=true;;
		t) target="$OPTARG";;
		?) usage;exit 1;;
	esac
done
shift $(( $OPTIND -1 ))

#per-target options
case $target in
	ironwood|chromebook|workdesktop|xbmc) gui=true;;
esac

# Check if running Arch Linux
echo "Verifying required packages are installed."
if $(echo $RELEASE|grep -qi "Arch Linux" > /dev/null 2>&1); then
	echo "OS appears to be Arch Linux..."

	if [[ -z "$nosystemchanges" ]]; then
		echo "Updating repo/ca-certs config..."
		if pacman -Q dray-repo > /dev/null 2>&1
		then
			$sudo pacman -Sy --noconfirm dray-repo > /dev/null
		else
			$sudo pacman -U --noconfirm $DOTFILES/install-files/dray-repo-*-any.pkg.tar.xz > /dev/null
		fi

		while read package
		do
			pacman -Q $package > /dev/null 2>&1 || PACINST="$PACINST $package"
		done < "$DOTFILES/install-files/global-packages"

		if [[ ! -z "$gui" ]]
		then
			while read package
			do
				pacman -Q $package > /dev/null 2>&1 || PACINST="$PACINST $package"
			done < "$DOTFILES/install-files/gui-packages"
		fi

		if [[ ! -z "$target" ]]
		then
			while read package
			do
				pacman -Q $package > /dev/null 2>&1 || PACINST="$PACINST $package"
			done < "$DOTFILES/install-files/per-target/$target-packages"
		fi

		[[ $PACINST == "" ]] || $sudo pacman -Sy --noconfirm $PACINST
	fi
# Check if running OS X
elif $(echo $RELEASE|grep -qi darwin > /dev/null 2>&1); then
	echo "OS appears to be Mac OS X..."
	if [[ -z "$nosystemchanges" ]]; then
		for package in $MACBREW
		do
			brew list|grep $package > /dev/null 2>&1 || BREWINST="$BREWINST $package"
		done
		[[ $BREWINST == "" ]] || brew install $BREWINST
		echo "Since you are running OS X. Please ensure 'AcceptEnv' in /etc/sshd_config includes 'IHAVEPATCHEDFONTS'"
		echo "Also check that 'Defaults env_keep += \"SSH_TTY\"' and 'Defaults env_keep += \"IHAVEPATCHEDFONTS\"' are in sudoers"
	fi
else
	echo "You are not using Arch Linux; You may have to install some of the following manually: $(cat "$DOTFILES/install-files/*packages")"
	echo "Once you have; press enter to continue"
	read
fi


if [ "$RELEASE" == "Darwin" ]; then
	#echo -n "Copying OS X specific files... "
	#rsync -a "$DOTFILES/install-files/mac/" "~/" > /dev/null 2>&1
	#check $?
	echo > /dev/null
else
	echo "Copying fonts... "
	mkdir -p ~/.fonts/ ~/.config/fontconfig/conf.d
	cp $DOTFILES/install-files/fonts/* ~/.fonts/
	mv ~/.fonts/*.conf ~/.config/fontconfig/conf.d/
	fc-cache -f ~/.fonts > /dev/null

fi

if [[ -z "$nosystemchanges" ]]; then
	echo -n "Checking SSHD config... "
	if `grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config`; then
		echo -e "[ \e[1;32mOK\e[00m ]"
	else
		echo -e "[\e[1;33mFixing\e[00m]"
		if `grep -q "AcceptEnv" $sshd_config`; then
			$sudo $sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
		else
			echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
		fi
		echo -n "Restarting SSHD... "
		autorestart sshd
		check $?
	fi

	if [ -e /etc/sudoers ]; then
		if [ ! -f /etc/sudoers.d/patched-fonts ]; then
			echo -n "Applying sudoers config... "
				echo -e 'Defaults\tenv_keep += "SSH_TTY"\nDefaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee -a /etc/sudoers.d/patched-fonts > /dev/null
		fi
	fi
fi


echo -n "Copying base dotfiles... "
rsync -a $DOTFILES/install-files/global/ ~/
check $?
touch ~/.zshrc-addon > /dev/null

if [[ ! -z "$gui" ]]
then
	echo -n "Copying GUI config... "
	rsync -a $DOTFILES/install-files/gui/ ~/
	check $?
fi

if [[ ! -z "$target" ]]
then
	echo -n "Copying $target config... "
	rsync -a $DOTFILES/install-files/per-target/$target/ ~/
	check $?
	if [[ -f $DOTFILES/install-files/per-target/$target-script ]]
	then
		echo -n "Running $target script... "
		$DOTFILES/install-files/per-target/$target-script
		check $?
	fi
fi

echo -n "Installing/updating oh-my-zsh... "
rm -rf ~/.oh-my-zsh
cd ~
$tar --owner=$(id -un) --group=$(id -gn) -xf "$DOTFILES/install-files/oh-my-zsh.tar.gz"
cd ~/.oh-my-zsh
git reset --hard origin/master > /dev/null 2>&1
git pull > /dev/null 2>&1
check $?

echo "Changing shell to ZSH."
echo $SHELL|grep -q zsh || chsh -s `which zsh`

echo "If you want local terminals to use the agnoster theme; copy and uncomment the font config section from .zshrc to .zshrc-addon"
