#!/bin/bash
PACMAN="zsh git rsync"
MACBREW="zsh zsh-completion git gnu-sed"
DOTFILES=`cd $(dirname ${0});pwd`
sshd_config="/etc/ssh/sshd_config"
sudoers="/etc/sudoers"
sed=sed

# OS Detection / OS Specific variables
if [ -f /etc/os-release ]
then
	RELEASE=`grep "^NAME=" /etc/os-release`
#	DOTFILES=`dirname $(readlink -f "${0}}")`
elif uname -a|grep -qi darwin > /dev/null 2>&1
then
	RELEASE="Darwin"
	sshd_config="/etc/sshd_config"
	sed=gsed
#	DOTFILES=`cd $(dirname ${0});pwd`
else
	RELEASE="false"
	echo "Unable to detect OS correctly, assuming some sort of Linux..."
fi

if [ "x$DOTFILES" == "x" ]
then
	echo "An error has occured while determining the current path. Exiting."
	exit 1
fi

function check {
	rc=$1
	[[ $rc == 0 ]] && echo -e "[ \e[1;32mOK\e[00m ]"
	[[ $rc == 1 ]] && echo -e "[\e[1;31mFAILED\e[00m]"
	[[ $rc == 2 ]] && echo -e "[\e[1;33mFixing\e[00m]"
}

function autorestart {
	if `which systemctl > /dev/null 2>&1`; then
		$sudo systemctl restart $1
	elif `which service > /dev/null 2>&1`; then
		$sudo service $1 restart
	fi
	# Need to detect/restart service on OS X
	# Need to let user know if SSHD needs restarting manually
}

if `which sudo > /dev/null 2>&1`; then
	sudo=sudo
elif [[ $UID != 0 ]]; then
	echo "This script requires either sudo or root"
	exit 1
fi

# Check if running Arch Linux
echo "Verifying required packages are installed."
if `echo $RELEASE|grep -qi "Arch Linux" > /dev/null 2>&1`; then
	echo "OS appears to be Arch Linux..."
	for package in $PACMAN
	do
		pacman -Q $package > /dev/null 2>&1 || PACINST="$PACINST $package"
	done

	if [[ "$1" == "chromebook" ]]
	then
		while read package
		do
			pacman -Q $package > /dev/null 2>&1 || PACINST="$PACINST $package"
		done < $DOTFILES/install-files/chromebook-packages
	fi

	[[ $PACINST == "" ]] || $sudo pacman -S --noconfirm $PACINST

# Check if running OS X
elif `echo $RELEASE|grep -qi darwin > /dev/null 2>&1`; then
	echo "OS appears to be Mac OS X..."
	for package in $MACBREW
	do
		brew list|grep $package > /dev/null 2>&1 || BREWINST="$BREWINST $package"
	done
	[[ $BREWINST == "" ]] || brew install $BREWINST
	echo "Since you are running OS X. Please ensure 'AcceptEnv' in /etc/sshd_config includes 'IHAVEPATCHEDFONTS'"
	echo "Also check that 'Defaults env_keep += \"SSH_TTY\"' and 'Defaults env_keep += \"IHAVEPATCHEDFONTS\"' are in sudoers"
else
	echo "You are not using Arch Linux; You may have to install some of the following manually: $PACMAN"
	echo "Once you have; press enter to continue"
	read
fi

if [ "$RELEASE" == "Darwin" ]; then
	echo -n "Copying OS X specific files... "
	rsync -a $DOTFILES/install-files/mac/ ~ > /dev/null 2>&1
	check $?
else
	echo -n "Copying linux specific files... "
	rsync -a $DOTFILES/install-files/linux/ ~ > /dev/null 2>&1
	check $?

	echo "Copying fonts... "
	mkdir -p ~/.fonts/ ~/.config/fontconfig/conf.d
	cp $DOTFILES/install-files/fonts/* ~/.fonts/
	mv ~/.fonts/*.conf ~/.config/fontconfig/conf.d/
	fc-cache -f ~/.fonts > /dev/null

fi

echo -n "Checking SSHD config... "
if `grep -q "AcceptEnv.*IHAVEPATCHEDFONTS" $sshd_config`; then
	echo -e "[ \e[1;32mOK\e[00m ]"
else
	echo -e "[\e[1;33mFixing\e[00m]"
	if `grep -q "AcceptEnv" $sshd_config`; then
		$sudo $sed -i '/^AcceptEnv/ s/$/ IHAVEPATCHEDFONTS/' $sshd_config
	else
		echo "AcceptEnv IHAVEPATCHEDFONTS" | $sudo tee -a $sshd_config > /dev/null
	fi
	echo -n "Restarting SSHD... "
	autorestart sshd
	check $?
fi

if [ -e $sudoers ]; then
	echo -n "Checking sudoers config... "
	ret=0
	if ! `$sudo grep -q "^Defaults.*env_keep.*SSH_TTY" $sudoers`; then
		ret=2
		echo -e 'Defaults\tenv_keep += "SSH_TTY"' | $sudo tee -a $sudoers > /dev/null
	fi

	if ! `$sudo grep -q "^Defaults.*env_keep.*IHAVEPATCHEDFONTS" $sudoers`; then
		ret=2
		echo -e 'Defaults\tenv_keep += "IHAVEPATCHEDFONTS"' | $sudo tee -a $sudoers > /dev/null
	fi
	check $ret
fi


echo -n "Copying dotfiles... "
rsync -a $DOTFILES/install-files/global/ ~/
check $?
touch ~/.zshrc-addon > /dev/null

echo -n "Installing/updating oh-my-zsh... "
rm -rf ~/.oh-my-zsh
cd ~
tar zxf $DOTFILES/install-files/oh-my-zsh.tar.gz
cd ~/.oh-my-zsh
git reset --hard origin/master > /dev/null 2>&1
git pull > /dev/null 2>&1
check $?

echo "Changing shell to ZSH."
echo $SHELL|grep -q zsh || chsh -s `which zsh`

echo "If you want local terminals to use the agnoster theme; copy and uncomment the font config section from .zshrc to .zshrc-addon"

if [[ "$1" == "chromebook" ]]
then
	echo -n "Copying chromebook config... "
	rsync -a $DOTFILES/install-files/global/ ~/
	check $?
fi
